import os

configfile: "config/config.yaml"

PROJECT_ROOT = os.getcwd()
OUTPUT_DIR = os.path.join(PROJECT_ROOT, "output")

# Parse samples from config
SAMPLES = list(config["samples"].keys())

# Check that all sample files exist
missing = []
for sample in SAMPLES:
    location = config["samples"][sample]["location"]
    if not os.path.isfile(location):
        missing.append(location)
if missing:
    raise FileNotFoundError(f"The following sample files do not exist: {missing}")



### RULES ###

rule all:
    input:
        expand(os.path.join(OUTPUT_DIR, "{sample}", "predict", "{sample}.predicted.fa"), sample=SAMPLES),
        expand(os.path.join(OUTPUT_DIR, "{sample}", "predict", "predict_results", f"{{species}}_{{strain}}.gbk"), sample=SAMPLES, species=[config['samples'][s]['species'].replace(' ', '_') for s in SAMPLES], strain=[config['samples'][s]['strain'] for s in SAMPLES]),
        expand(os.path.join(OUTPUT_DIR, "{sample}", "predict", "predict_results", f"{{species}}_{{strain}}.parameters.json"), sample=SAMPLES, species=[config['samples'][s]['species'].replace(' ', '_').lower() for s in SAMPLES], strain=[config['samples'][s]['strain'].lower() for s in SAMPLES])

rule mask:
    input:
        genome = lambda wildcards: os.path.abspath(config["samples"][wildcards.sample]["location"])
    output:
        masked = os.path.join(OUTPUT_DIR, "{sample}", "mask", "{sample}.masked.fa")
    params:
        cpus = config.get("mask_threads", 8)
    shell:
        """
        cd {OUTPUT_DIR}/{wildcards.sample}/mask
        funannotate mask -i {input.genome} --cpus {params.cpus} -o {output.masked}
        """

rule predict:
    input:
        masked = os.path.join(OUTPUT_DIR, "{sample}", "mask", "{sample}.masked.fa")
    output:
        gbk = lambda wildcards: os.path.join(
            OUTPUT_DIR,
            wildcards.sample,
            "predict",
            "predict_results",
            f"{config['samples'][wildcards.sample]['species'].replace(' ', '_')}_" \
            f"{config['samples'][wildcards.sample]['strain']}.gbk"
        )
        params_json = lambda wildcards: os.path.join(
            OUTPUT_DIR,
            wildcards.sample,
            "predict",
            "predict_results",
            f"{config['samples'][wildcards.sample]['species'].replace(' ', '_').lower()}_" \
            f"{config['samples'][wildcards.sample]['strain'].lower()}.parameters.json"
        )
    params:
        cpus = config.get("predict_threads", 8),
        species = lambda wildcards: config["samples"][wildcards.sample]["species"],
        strain = lambda wildcards: config["samples"][wildcards.sample]["strain"],
        busco_seed_species = lambda wildcards: config["samples"][wildcards.sample]["busco_seed_species"]
    shell:
        """
        funannotate predict -i {input.masked} -o {OUTPUT_DIR}/{wildcards.sample}/predict \
            --species "{params.species}" --strain "{params.strain}" \
            --busco_seed_species "{params.busco_seed_species}" --cpus {params.cpus}
        """